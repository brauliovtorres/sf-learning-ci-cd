# Unique name for this workflow
name: Validate PR on develop branch

# Controls when the workflow will run
on:
    # Triggers the workflow on pull request events but only for the "develop" branch
    pull_request:

        # The events are that a PR is opened, or when a commit is pushed
        # to a branch that has an existing pull request
        types: [opened, synchronize]

        # The branches filter allows to specify that this workflow should only
        # run if the branch name is "develop". This way we prevent this workflow
        # from running when PRs are opened on other branches
        branches: [ develop ]

        # We only care about changes to the force-app directory, which is the
        # root directory of the sfdx project. This prevents the job from running
        # when changing non-salesforce files (like this yml file).
        paths:
        - 'force-app/**'

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

    # This is the name of the job. You can give it whatever name you want
    validate-deployment-on-develop-org:

        # Here we can specify which OS this VM should run on. 
        # In this case, we are going to run our commands on the latest version of ubuntu
        runs-on: ubuntu-latest

        # Steps represent a sequence of tasks that will be executed as part of the job
        steps:

            # Now we install nodejs in the VM, and specify version 18
            - name: 'Install node.js'
              uses: actions/setup-node@v3
              with:
                node-version: '18'
            
            # The idea is that the VM can access your remote repository
            # because your repository is an sfdx project.
            # This is a default action that allows us to enter the root 
            # directory of the repository

            # Make sure to specify fetch-depth:0. This allows us to
            # access previous commits that have been pushed to the repository.

            # We'll need this later when we try to figure out which metadata has 
            # changed between commits, so that we can only deploy that metadata
            # to the destination org

            # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                fetch-depth: 0

            # Now, we need a way to let the developer specify which tests to run, which
            # could be all tests or just the tests relevant to their deployment.

            # To do this, we can ask the developer to name their test classes in the
            # body of the PR, using the following syntax

            # Apex::[CommunitiesLoginControllerTest,MyProfilePageControllerTest]::Apex
            # or Apex::[all]::Apex to run all tests

            # This special delimeter can be added to the PR template so that your 
            # team doesn't have to remember the syntax. 

            # Once a developer has specified a list of classes to run, we need to be able
            # to extract this information from the PR, and pass it on the the VM.

            - name: 'Read PR Body'
              env:
                # The pull request body is available through the github context object
                # we put the body of the pull request in an env variable (only available to this step)
                PR_BODY: ${{github.event.pull_request.body}}

              # Here we print the content of the environment variable and
              # pipe to a a text file.

              # Then we call the local script parsePR.js, which will create
              # a new file called testsToRun.txt. This file will have the list
              # of tests to run separated by a comma

              # Finally, we add the list of tests to the $GITHUB_ENV variable
              # as this allows us to reference the list in a subsequent step.  If you
              # were using a normal env variable, its value would not be available outside this step.
              run: |
                  echo $PR_BODY > ./pr_body.txt
                  node ./parsePR.js              
                  TESTS=$(cat testsToRun.txt)       
                  echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV



            # Runs a single command using the runners shell
            - name: Run a one-line script
              run: echo Hello, world!

            # Runs a set of commands using the runners shell
            - name: Run a multi-line script
              run: |
                echo Add other actions to build,
                echo test, and deploy your project.